version: 2.1
jobs:
  unit_test:
    parallelism: 1
    docker:
      - image: circleci/elixir:1.7.4-node
        environment:
          MIX_ENV: test
      - image: circleci/postgres:11.1-alpine
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: phx_template_test
          POSTGRES_PASSWORD:

    working_directory: ~/phx_template

    steps:
      - checkout

      - run: mix local.hex --force
      - run: mix local.rebar --force

      - restore_cache:
          keys:
            - v1-mix-cache-{{ .Branch }}-{{ checksum "mix.lock" }}
            - v1-mix-cache-{{ .Branch }}
            - v1-mix-cache
      - restore_cache:
          keys:
            - v1-build-cache-{{ .Branch }}
            - v1-build-cache
      - run: mix do deps.get, compile
      - save_cache:
          key: v1-mix-cache-{{ .Branch }}-{{ checksum "mix.lock" }}
          paths: "deps"
      - save_cache:
          key: v1-mix-cache-{{ .Branch }}
          paths: "deps"
      - save_cache:
          key: v1-mix-cache
          paths: "deps"
      - save_cache:
          key: v1-build-cache-{{ .Branch }}
          paths: "_build"
      - save_cache:
          key: v1-build-cache
          paths: "_build"

      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m

      - run: mix test

      - store_test_results:
          path: _build/test/lib/phx_template
  build_image:
    docker:
      - image: circleci/elixir:1.7.4-node

    working_directory: ~/phx_template

    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build docker image
          command: make image
      - run:
          name: Start container and verify it is working
          command: |
            set -x
            make run
            docker run --network container:deploy_web_1 \
              inutano/wget wget -O - -t 15 --waitretry=1 --retry-connrefused http://localhost:5000/
            make stop
      - run:
          name: Push image
          command: |
            docker login -u $DOCKER_USER -p $DOCKER_PASS
            make push-image
workflows:
  version: 2
  test_and_build:
    jobs:
      - unit_test
      - build_image:
          filters:
            branches:
              only: master
          requires:
            - unit_test
